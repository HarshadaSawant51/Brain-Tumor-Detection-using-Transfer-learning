import cv2
import numpy as np

from fpdf import FPDF
class BrainTumor:
    def detectS(self,imgName,uname):
        image = cv2.imread('profiles/' + imgName)
        dim = (500, 590)
        image = cv2.resize(image, dim)

        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY, 0.7)




        (T, thresh) = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY)
        cv2.imwrite('result/' + uname + '_thresholded.png', gray)


        (T, threshInv) = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY_INV)


        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 5))
        closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)


        closed = cv2.erode(closed, None, iterations=19)
        closed = cv2.dilate(closed, None, iterations=17)
        cv2.imwrite('result/' + uname + '_closed.png', closed)


        ret, mask = cv2.threshold(closed, 155, 255, cv2.THRESH_BINARY)
        # apply AND operation on image and mask generated by thrresholding
        final = cv2.bitwise_and(image, image, mask=mask)


        canny = auto_canny(closed)
        cv2.imwrite('result/' + uname + '_canny.png', canny)

        (cnts, _) = cv2.findContours(canny.copy(), cv2.RETR_EXTERNAL,
                                     cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(image, cnts, -1, (0, 0, 255), 2)

        cv2.imwrite('result/' + uname + '_res.png', image)



        pdf = FPDF()
        pdf.alias_nb_pages()
        pdf.add_page()
        pdf.set_font('Times', '', 12)

        imgpaths = ['result/'+uname+'_thresholded.png', 'result/'+uname+'_closed.png', 'result/'+uname+'_canny.png','result/'+uname+'_res.png']
        strings = ["Thresholded Image", "Erosion and Dialation", "Canny Edge detection",
                   "Tumor region highlighted"]

        for i in range(0, 4):
            pdf.cell(0, 10, strings[i], 0, 1, 'C')
            pdf.image(imgpaths[i], x=50, w=100, h=100)
            if (i != 4):
                pdf.add_page()

        import os

        pdf.output(uname+'_report.pdf', 'F')
        os.system(uname+'_report.pdf')
        return True,uname +'_thresholded.png',uname + '_closed.png', uname + '_canny.png', uname + '_res.png'


def auto_canny(image, sigma=0.33):
        # compute the median of the single channel pixel intensities
        v = np.median(image)
        # apply automatic Canny edge detection using the computed median
        lower = int(max(0, (1.0 - sigma) * v))
        upper = int(min(255, (1.0 + sigma) * v))
        edged = cv2.Canny(image, lower, upper)
        # return the edged image
        return edged

def detect(self,imgName,uname):
        cv2.namedWindow("Tracking")

        #cv2.createTrackbar("UH", "Tracking", 255, 255, nothing)
        cv2.createTrackbar("US", "Tracking", 255, 255, nothing)
        cv2.createTrackbar("UV", "Tracking", 255, 255, nothing)
        while True:
            frame = cv2.imread('profiles/'+imgName, -1)
            hsv = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)
            l_b = np.array([0,0,0])
            u_b = np.array([255, cv2.getTrackbarPos("US", "Tracking"),
                            cv2.getTrackbarPos("UV", "Tracking")])
            #u_b = np.array([255,180,
            #                180])
            mask = cv2.inRange(hsv, l_b, u_b)
            res = cv2.bitwise_and(frame, frame, mask=mask)
            res2 = cv2.bitwise_and(frame, frame, mask=mask)
            ret, thresh = cv2.threshold(mask, 127, 255, 0)
            contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            print(contours[0])

            cv2.drawContours(res2, contours, -1, (0, 255, 0), 3)
            for contour in contours:
                (x, y, w, h) = cv2.boundingRect(contour)
                if cv2.contourArea(contour) < 700:
                    continue
                cv2.rectangle(res, (x, y), (x + w, y + h), (0, 255, 0), 2)
            frame = cv2.resize(frame, (500, 500), interpolation=cv2.INTER_AREA)
            mask = cv2.resize(mask, (500, 500), interpolation=cv2.INTER_AREA)
            res = cv2.resize(res, (500, 500), interpolation=cv2.INTER_AREA)
            res2 = cv2.resize(res2, (500, 500), interpolation=cv2.INTER_AREA)

            cv2.imshow("Input Image", frame)
            cv2.imshow("Locating Bounding Box", mask)
            cv2.imshow("Result", res)
            cv2.imshow("Segmented tumor", res2)
            if cv2.waitKey(1) == ord('s'):
                cv2.imwrite('result/'+uname+'_input.png', frame)
                cv2.imwrite('result/'+uname+'_mask.png', mask)
                cv2.imwrite('result/'+uname+'_res.png', res)
                cv2.imwrite('result/'+uname+'_res2.png', res2)
                cv2.destroyAllWindows();
                return True, uname+'_input.png',uname+'_mask.png',uname+'_res.png',uname+'_res2.png'
            if cv2.waitKey(1) == ord('x'):
                cv2.destroyAllWindows();
                return False,'','','',''
            if cv2.waitKey(1) == 27:
                cv2.destroyAllWindows();
                return False, '', '', '', ''
        cv2.destroyAllWindows();



def nothing(x):
    print(x)